generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Maps {
  id             String @id @default(uuid())
  name           String
  uid            String @unique
  fileName       String
  author         String
  authorNickname String
  authorTime     Int
  goldTime       Int
  silverTime     Int
  bronzeTime     Int

  submitter    String?
  timestamp    DateTime?
  fileUrl      String?   @unique
  thumbnailUrl String?   @unique

  records Records[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("maps")
}

model Users {
  id              String               @id @default(uuid())
  login           String               @unique
  nickName        String
  path            String
  admin           Boolean              @default(false)
  ubiUid          String               @unique
  groups          GroupMember[]
  hetznerProjects HetznerProjectUser[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("users")
}

model Records {
  id     String @id @default(uuid())
  mapId  String
  map    Maps   @relation(fields: [mapId], references: [id])
  login  String
  mapUid String
  time   Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@index([mapId])
  @@map("records")
}

model Interfaces {
  id              String @id @default(uuid())
  name            String
  interfaceString String @db.LongText

  serverId String
  server   Servers @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("interfaces")
}

model Groups {
  id          String @id @default(uuid())
  name        String
  description String

  servers GroupServers[]
  users   GroupMember[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("groups")
}

model GroupMember {
  userId  String
  groupId String
  role    GroupRole

  user  Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Groups @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@map("group_members")
}

enum GroupRole {
  Admin
  Moderator
  Member
}

model HetznerProjects {
  id        String               @id @default(uuid())
  name      String
  apiTokens Json
  users     HetznerProjectUser[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("hetzner_projects")
}

model HetznerProjectUser {
  userId    String
  projectId String
  role      HetznerProjectRole

  user    Users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  project HetznerProjects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([userId, projectId])
  @@map("hetzner_project_users")
}

enum HetznerProjectRole {
  Admin
  Moderator
}

model Servers {
  id             String @id @default(uuid())
  name           String
  description    String
  host           String
  port           Int
  user           String
  password       String
  filemanagerUrl String

  interfaces Interfaces[]
  groups     GroupServers[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("servers")
}

model GroupServers {
  groupId  String
  serverId String

  group  Groups  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  server Servers @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@id([groupId, serverId])
  @@map("group_servers")
}
