generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Maps {
  id             String   @id @default(uuid())
  name           String
  uid            String @unique
  fileName       String
  author         String
  authorNickname String
  authorTime     Int
  goldTime       Int
  silverTime     Int
  bronzeTime     Int

  submitter      String?
  timestamp      DateTime? 
  fileUrl        String? @unique
  thumbnailUrl   String? @unique

  records        Records[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  @@index([deletedAt])
  @@map("maps")
}

model Users {
  id        String   @id @default(uuid())
  login     String
  nickName  String
  path      String
  admin    Boolean @default(false)
  ubiUid    String

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  groupMembers GroupMember[]

  @@index([deletedAt])
  @@map("users")
}

model Records {
  id        String   @id @default(uuid())
  mapId    String
  map Maps @relation(fields: [mapId], references: [id])
  login    String
  mapUid  String
  time   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@index([mapId])
  @@map("records")
}

model Interfaces {
  id       String   @id @default(uuid())
  name    String
  serverUuid String
  interfaceString String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("interfaces")
}

model Groups {
  id           String        @id @default(uuid())
  name         String
  description  String
  serverUuids  String[]
  users        GroupMember[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?

  @@index([deletedAt])
  @@map("groups")
}

model GroupMember {
  userId   String
  groupId  String
  role     GroupRole

  user     Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group    Groups  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@map("group_members")
}

enum GroupRole {
  Admin
  Moderator
  Member
}